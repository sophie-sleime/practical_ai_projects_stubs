# TODO: Import the random module to select random words
import random 

word_list = [
    "python",
    "hangman",
    "computer",
    "programming",
    "keyboard",
    "elephant",
    "calendar",
    "sunshine",
    "mountain",
    "basketball",
    "orchestra",
    "universe",
    "chemistry",
    "adventure"
]


# TODO: Create a function to select a random word that:
# - Takes no parameters
# - Uses random.choice to select a random word from your word list
# - Returns the selected word in lowercase

def get_random_word():
    return random.choice(word_list)

# TODO: Create a function to initialize the game state that:
# - Takes parameter: word (str)
# - Creates and returns a dictionary with these keys:
#   - "word": the word to guess
#   - "guessed_letters": an empty list to track guessed letters
#   - "word_completion": a string of underscores representing unguessed letters (e.g., "_ _ _ _")
#   - "tries_remaining": number of incorrect guesses allowed (start with 6)
def initialize_game_state(word):
  return {
    "word" : word, 
    "guessed_letters" : [], 
    "word_completion" : "_"*len(word), 
    "tries_remaining" : 6
  }
# TODO: Create a function to display the game state that:
# - Takes parameter: game_state (dict)
# - Prints the current hangman state based on tries_remaining
#   (You can use ASCII art for different hangman states)
# - Prints the current word completion (with spaces between letters)
# - Prints the letters that have been guessed so far
# - Prints the number of tries remaining
# ASCII art for hangman states
HANGMAN_STAGES = [
    '''
      +---+
      |   |
          |
          |
          |
          |
    =========''',
    '''
      +---+
      |   |
      O   |
          |
          |
          |
    =========''',
    '''
      +---+
      |   |
      O   |
      |   |
          |
          |
    =========''',
    '''
      +---+
      |   |
      O   |
     /|   |
          |
          |
    =========''',
    '''
      +---+
      |   |
      O   |
     /|/  |
          |
          |
    =========''',
    '''
      +---+
      |   |
      O   |
     /|/  |
     /    |
          |
    =========''',
    '''
      +---+
      |   |
      O   |
     /|/  |
     / /  |
          |
    ========='''
]
def show_hangman_stage(game_state): 
  print(HANGMAN_STAGES[6 - game_state["tries_remaining"]])
  

# TODO: Create a function to get a valid letter guess that:
# - Takes parameter: game_state (dict)
# - Asks the user to guess a letter
# - Validates that the input is:
#   - A single character
#   - A letter (not a number or symbol)
#   - Not already guessed
# - Returns the valid guessed letter in lowercase
# - Keeps asking until a valid letter is entered
def get_valid_letter_guess(game_state):
    while True:
        guess = input("Guess a letter in the word:").strip().lower()

        if len(guess) != 1:
            print("Please enter a single letter.")
        elif not guess.isalpha():
            print("Please enter a letter (a-z).")
        elif guess in game_state.get("guessed_letters", []):
            print("You have already guessed that letter. Try again.")
        else:
            return guess

# TODO: Create a function to update the game state that:
# - Takes parameters: game_state (dict) and guessed_letter (str)
# - Adds the guessed letter to the guessed_letters list
# - Checks if the guessed letter is in the word
# - If it is, updates the word_completion to reveal the letter
# - If it's not, decreases the tries_remaining
# - Returns True if the guess was correct, False otherwise
def update_game_state(game_state, guessed_letter):
    game_state["guessed_letters"].append(guessed_letter)

    if guessed_letter in game_state["word"]:
        updated_completion = list(game_state["word_completion"])
        for idx, char in enumerate(game_state["word"]):
            if char == guessed_letter:
                updated_completion[idx] = guessed_letter
        game_state["word_completion"] = "".join(updated_completion)
        return True
    else:
        game_state["tries_remaining"] -= 1
        return False
# TODO: Create a function to check if the game is over that:
# - Takes parameter: game_state (dict)
# - Returns True if the word is completely guessed or no tries remain
# - Returns False otherwise
def is_game_over(game_state):
    if game_state["word_completion"] == game_state["word"]:
      return True
    elif game_state["tries_remaining"] <= 0:
          return True 
    else:
          return False

# TODO: Create a function to check if the player won that:
# - Takes parameter: game_state (dict)
# - Returns True if the word_completion matches the word (no more underscores)
# - Returns False otherwise
def has_player_won(game_state):
    return game_state["word_completion"] == game_state["word"]


# TODO: Create the main game function that:
# - Takes no parameters
# - Selects a random word
# - Initializes the game state
# - Displays welcome message and initial game state
# - Loops until the game is over:
#   - Gets a valid letter guess
#   - Updates the game state with the guess
#   - Displays the updated game state
# - When game ends, displays win or lose message
# - Reveals the word if the player lost
# - Asks if the player wants to play again
def play_game():
    word = get_random_word()

    game_state = initialize_game_state(word)  # Correct way to initialize

    print("Welcome to the Hangman Game!\n")

    while not is_game_over(game_state):
        show_hangman_stage(game_state)  # No need to pass HANGMAN_STAGES
        print(f"\nWord: {' '.join(game_state['word_completion'])}")
        print(f"Guessed Letters: {', '.join(game_state['guessed_letters'])}")
        print(f"Tries Remaining: {game_state['tries_remaining']}\n")

        guess = get_valid_letter_guess(game_state)
        correct = update_game_state(game_state, guess)

        print("\n" + ("That is correct!" if correct else "That is incorrect!"))

    # End of Game Actions
    show_hangman_stage(game_state)
    if has_player_won(game_state):
        print(f"\nCongratulations, you won hangman! The word was '{game_state['word']}'.")
    else:
        print(f"\nYou lost hangman! The word was '{game_state['word']}'.")

# TODO: Create the main program that:
# - Prints a welcome message
# - Calls the main game function
# - Handles play again logic
def main_game():
    print("Welcome to Hangman")
    while True:
        play_game()
        play_again = input("Do you want to play another round? (y/n): ").strip().lower()
        if play_again != 'y':
            print("Thanks for playing Hangman, Goodbye!")
            break

if __name__ == "__main__":
    main_game() 